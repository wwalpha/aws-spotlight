name: RESUABLE) Lambda Build for Container Image

on:
  workflow_call:
    inputs:
      function-name:
        required: true
        type: string
      function-name2:
        type: string
      region:
        required: true
        type: string
      working-directory:
        required: true
        type: string
      dockerfile:
        required: true
        type: string
      repository:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true

jobs:
  LAMBDA_BUILD:
    runs-on: ubuntu-latest
    env:
      AWS_DEFAULT_REGION: ${{ inputs.region }}
      FUNCTION_NAME: ${{ inputs.function-name }}
      FUNCTION_NAME2: ${{ inputs.function-name2 }}
      DOCKER_FILE: ${{ inputs.dockerfile }}
      ECR_REPOSITORY: ${{ inputs.repository }}
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}

    steps:
      # source checkout
      - name: Checkout
        uses: actions/checkout@v4

      # Setup Node.js
      - uses: actions/setup-node@v4
        with:
          node-version: 22

      # AWS Credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      # Install and Build
      - name: Build
        run: |
          yarn install
          yarn build

      # ECR Login
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # docker build and push
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -f $DOCKER_FILE -t $ECR_REPOSITORY .
          docker tag $ECR_REPOSITORY $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REPOSITORY $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      # Lambda Deploy
      - name: Lambda Deploy
        uses: appleboy/lambda-action@v0.2.0
        with:
          function_name: ${{ env.FUNCTION_NAME }}
          image_uri: ${{ steps.build-image.outputs.image }}

      - name: Wait for ECR sync
        run: sleep 10

      # Lambda Deploy
      - name: Lambda Deploy
        uses: appleboy/lambda-action@v0.2.0
        with:
          function_name: ${{ env.FUNCTION_NAME2 }}
          image_uri: ${{ steps.build-image.outputs.image }}
