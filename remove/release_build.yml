name: RELEASE_B) Production Build

on:
  release:
    types:
      - prereleased
      - edited

env:
  AWS_DEFAULT_REGION: us-east-1
  WORKING_DIR_TERRAFORM: terraform
  WORKING_DIR_BACKEND: backend
  WORKING_DIR_FRONTEND: frontend
  ECR_REPOSITORY_RESOURCE: arms/resource/44e2a0
  ECR_REPOSITORY_AUTH: arms/auth/44e2a0
  ECR_REPOSITORY_USER: arms/user/44e2a0
  ECR_REPOSITORY_CLOUDTRAIL: arms/cloudtrail/44e2a0
  ECR_REPOSITORY_UNPROCESSED: arms/unprocessed/44e2a0
  SSM_PARAMETER_NAME_AUTH: /arms/repository_url/auth_manager/44e2a0
  SSM_PARAMETER_NAME_RESOURCE: /arms/repository_url/resource_manager/44e2a0
  SSM_PARAMETER_NAME_USER: /arms/repository_url/user_manager/44e2a0
  SSM_PARAMETER_NAME_CLOUDTRAIL: /arms/repository_url/cloudtrail/44e2a0
  SSM_PARAMETER_NAME_UNPROCESSED: /arms/repository_url/unprocessed/44e2a0
  SSM_PARAMETER_NAME_FRONTEND: /arms/frontend/44e2a0

jobs:
  Terraform:
    runs-on: ubuntu-20.04
    environment:
      name: prod
    env:
      TF_VAR_domain_name: ${{ secrets.DOMAIN_NAME }}
      TF_VAR_admin_email: ${{ secrets.ADMIN_EMAIL }}
    steps:
      # source checkout
      - name: Checkout
        uses: actions/checkout@v4

      # Install the latest version of Terraform CLI
      # and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.2

      # AWS Credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      # Terraform Setup
      - name: Terraform Setup
        working-directory: ${{ env.WORKING_DIR_TERRAFORM }}/setup
        run: |
          mv main.tf.prod main.tf
          terraform init
          terraform plan

      # Terraform Service
      - name: Terraform Service
        working-directory: ${{ env.WORKING_DIR_TERRAFORM }}/services
        run: |
          mv main.tf.prod main.tf
          terraform init
          terraform plan

      # Terraform Backend
      - name: Terraform Backend
        working-directory: ${{ env.WORKING_DIR_BACKEND }}/terraform
        run: |
          mv main.tf.prod main.tf
          terraform init
          terraform plan

  # [ECS] Auth Manager
  ECS_Auth:
    runs-on: ubuntu-20.04
    concurrency: auth_manager
    environment:
      name: prod
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR_BACKEND }}/src/auth_manager

    steps:
      # Source checkout
      - name: Checkout
        uses: actions/checkout@v4

      # Setup Node.js
      - uses: actions/setup-node@v4
        with:
          node-version: 20

      # AWS Credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      # Install, Build
      - name: Build
        run: |
          yarn install
          yarn build

      # Unit Test
      # - name: Unit Test
      #   run: |
      #     docker-compose up -d --build
      #     sleep 10
      #     yarn test
      #     docker-compose down

      # ECR Login
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # docker build and push
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REPOSITORY_AUTH .
          docker tag $ECR_REPOSITORY_AUTH $ECR_REGISTRY/$ECR_REPOSITORY_AUTH:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_AUTH:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY_AUTH:$IMAGE_TAG"

      # Update Repository URL
      - name: Update ecs repository url
        run: |
          aws ssm put-parameter --name $SSM_PARAMETER_NAME_AUTH --type "String" --value ${{ steps.build-image.outputs.image }} --overwrite

  # [ECS] Resource Manager
  ECS_Resource:
    runs-on: ubuntu-20.04
    concurrency: resource_manager
    environment:
      name: prod
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR_BACKEND }}/src/resource_manager

    steps:
      # Source checkout
      - name: Checkout
        uses: actions/checkout@v4

      # Setup Node.js
      - uses: actions/setup-node@v4
        with:
          node-version: 20

      # AWS Credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      # Install and Build
      - name: Build
        run: |
          yarn install
          yarn build

      # Unit Test
      # - name: Unit Test
      #   run: |
      #     docker-compose up -d --build
      #     sleep 10
      #     yarn test
      #     docker-compose down

      # ECR Login
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # docker build and push
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REPOSITORY_RESOURCE .
          docker tag $ECR_REPOSITORY_RESOURCE $ECR_REGISTRY/$ECR_REPOSITORY_RESOURCE:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_RESOURCE:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY_RESOURCE:$IMAGE_TAG"

      # Update Repository URL
      - name: Update ecs repository url
        run: |
          aws ssm put-parameter --name $SSM_PARAMETER_NAME_RESOURCE --type "String" --value ${{ steps.build-image.outputs.image }} --overwrite

  # [ECS] User Manager
  ECS_User:
    runs-on: ubuntu-20.04
    concurrency: user_manager
    environment:
      name: prod
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR_BACKEND }}/src/user_manager

    steps:
      # Source checkout
      - name: Checkout
        uses: actions/checkout@v4

      # Setup Node.js
      - uses: actions/setup-node@v4
        with:
          node-version: 20

      # AWS Credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      # Install and Build
      - name: Build
        run: |
          yarn install
          yarn build

      # Unit Test
      # - name: Unit Test
      #   run: |
      #     docker-compose up -d --build
      #     sleep 10
      #     yarn test
      #     docker-compose down

      # ECR Login
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # docker build and push
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REPOSITORY_USER .
          docker tag $ECR_REPOSITORY_USER $ECR_REGISTRY/$ECR_REPOSITORY_USER:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_USER:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY_USER:$IMAGE_TAG"

      # Update Repository URL
      - name: Update ecs repository url
        run: |
          aws ssm put-parameter --name $SSM_PARAMETER_NAME_USER --type "String" --value ${{ steps.build-image.outputs.image }} --overwrite

  # [Lambda] Authorizer
  Lambda_Authorizer:
    runs-on: ubuntu-20.04
    concurrency: lambda_authorizer
    environment:
      name: prod
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR_BACKEND }}/src/authorizer

    steps:
      # Source checkout
      - name: Checkout
        uses: actions/checkout@v4

      # Setup Node.js
      - uses: actions/setup-node@v4
        with:
          node-version: 20

      # Install and Build
      - name: Build
        run: |
          yarn install
          yarn build

  # [Lambda] CloudTrail
  Lambda_CloudTrail:
    runs-on: ubuntu-20.04
    concurrency: cloudtrail
    environment:
      name: prod
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR_BACKEND }}/src/cloudtrail

    steps:
      # Source checkout
      - name: Checkout
        uses: actions/checkout@v4

      # Setup Node.js
      - uses: actions/setup-node@v4
        with:
          node-version: 20

      # AWS Credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      # Install and Build
      - name: Build
        run: |
          yarn install
          yarn build

      # ECR Login
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # docker build and push
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -f "Dockerfile.CloudTrail" -t $ECR_REPOSITORY_CLOUDTRAIL .
          docker tag $ECR_REPOSITORY_CLOUDTRAIL $ECR_REGISTRY/$ECR_REPOSITORY_CLOUDTRAIL:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_CLOUDTRAIL:$IMAGE_TAG
          docker tag $ECR_REPOSITORY_CLOUDTRAIL $ECR_REGISTRY/$ECR_REPOSITORY_CLOUDTRAIL:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_CLOUDTRAIL:latest
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY_CLOUDTRAIL:$IMAGE_TAG"

      # Update Repository URL
      - name: Update repository url
        run: |
          aws ssm put-parameter --name $SSM_PARAMETER_NAME_CLOUDTRAIL --type "String" --value ${{ steps.build-image.outputs.image }} --overwrite

  Lambda_FilteringRaw:
    uses: ./.github/workflows/reuse_lambda.yml
    with:
      region: us-east-1
      working-directory: backend/src/filtering_raw
      environment: prod
      outputs-bucket: arms-archive-44e2a0
      function-name: filtering_raw
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  Lambda_FilteringEvents:
    uses: ./.github/workflows/reuse_lambda.yml
    with:
      region: us-east-1
      working-directory: backend/src/filtering_events
      environment: prod
      outputs-bucket: arms-archive-44e2a0
      function-name: filtering_events
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  Lambda_Streaming:
    uses: ./.github/workflows/reuse_lambda.yml
    with:
      region: us-east-1
      working-directory: backend/src/streaming
      environment: prod
      outputs-bucket: arms-archive-44e2a0
      function-name: streaming
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  # [Lambda] Unprocessed
  Lambda_Unprocessed:
    runs-on: ubuntu-20.04
    concurrency: unprocessed
    environment:
      name: prod
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR_BACKEND }}/src/cloudtrail

    steps:
      # Source checkout
      - name: Checkout
        uses: actions/checkout@v4

      # Setup Node.js
      - uses: actions/setup-node@v4
        with:
          node-version: 20

      # AWS Credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      # Install and Build
      - name: Build
        run: |
          yarn install
          yarn build

      # ECR Login
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # docker build and push
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -f "Dockerfile.Unprocessed" -t $ECR_REPOSITORY_UNPROCESSED .
          docker tag $ECR_REPOSITORY_UNPROCESSED $ECR_REGISTRY/$ECR_REPOSITORY_UNPROCESSED:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_UNPROCESSED:$IMAGE_TAG
          docker tag $ECR_REPOSITORY_UNPROCESSED $ECR_REGISTRY/$ECR_REPOSITORY_UNPROCESSED:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_UNPROCESSED:latest
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY_UNPROCESSED:$IMAGE_TAG"

      # Update Repository URL
      - name: Update repository url
        run: |
          aws ssm put-parameter --name $SSM_PARAMETER_NAME_UNPROCESSED --type "String" --value ${{ steps.build-image.outputs.image }} --overwrite

  # Release Events
  Release_Events:
    runs-on: ubuntu-20.04
    concurrency: events
    environment:
      name: prod
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR_BACKEND }}/src/release_events

    steps:
      # source checkout
      - name: Checkout
        uses: actions/checkout@v4

      # Setup Node.js
      - uses: actions/setup-node@v4
        with:
          node-version: 20

      # Installation
      - name: Build
        run: |
          yarn install
          yarn build

  # Frontend
  Frontend:
    runs-on: ubuntu-20.04
    concurrency: frontend
    environment:
      name: prod
    env:
      BUCKET_NAME_ARCHIVE: ${{ secrets.BUCKET_NAME_ARCHIVE }}
      BACKEND_API_URL: ${{ secrets.BACKEND_API_URL }}
      NODE_ENV: production
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR_FRONTEND }}

    steps:
      # source checkout
      - name: Checkout
        uses: actions/checkout@v4

      # Setup Node.js
      - uses: actions/setup-node@v4
        with:
          node-version: 20

      # AWS Credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      # Install and Build
      - name: Build
        run: |
          yarn install --production=false
          yarn build

      # Upload dist files
      - name: Upload files
        env:
          FILE_NAME: ${{ github.sha }}
        run: |
          cd dist && zip -r -q $FILE_NAME.zip *
          aws s3 cp $FILE_NAME.zip s3://$BUCKET_NAME_ARCHIVE/frontend/$FILE_NAME.zip --region $AWS_DEFAULT_REGION
          aws ssm put-parameter --name $SSM_PARAMETER_NAME_FRONTEND --type "String" --value s3://$BUCKET_NAME_ARCHIVE/frontend/$FILE_NAME.zip --overwrite
